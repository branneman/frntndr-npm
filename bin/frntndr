#!/usr/bin/env node

'use strict';

process.title = 'frntndr';

// External dependencies
var parseArgs = require('minimist');
var colors    = require('colors');
var async     = require('async');
var fs        = require('fs');
var path      = require('path');
var glob      = require('glob');
var https     = require('https');
var AdmZip    = require('adm-zip');
var exec      = require('child_process').exec

// Local dependencies
var pkg        = require('../package.json');
var getGitTags = require('../lib/frntndr-tags.js');

//
// Option parsing
//
var argv = parseArgs(process.argv.slice(2), {
    string: ['t', 'tag']
});
var allowedOptions = 'v version h help t tag'.split(' ');
Object.keys(argv).forEach(function(key) {
    if (key !== '_' && !~allowedOptions.indexOf(key)) {
        printUsage('Unknown option: ' + key);
    }
});
if (argv.v || argv.version) {
    console.log(pkg.version);
    process.exit();
}
if (argv._.length !== 1 || argv.t === true || argv.tag === true) {
    printUsage();
}
var optDir = argv._[0];
var optTag = argv.t || argv.tag;
console.log('');

//
// Control flow
//
async.waterfall([
    createDirectory,
    getGitTags,
    getGithubUrl,
    downloadZip,
    unzip,
    unlink,
    npmInstall
], reporter);

//
// Print usage information to CLI and exit
//
function printUsage(err) {

    console.log('');
    if (err) {
        console.log('  Error: '.red + err);
        console.log('');
    }
    console.log('  Usage: '.bold + 'frntndr [options] <target>');
    console.log('');
    console.log('  Options:'.bold);
    console.log('');
    console.log('    -t [tag], --tag [tag]    install specified older version');
    console.log('    -h,       --help         output usage information');
    console.log('    -v,       --version      output the version number');
    console.log('');

    process.exit(err ? -1 : 0);
}

//
// Optionally create and change into specified target directory
//
function createDirectory(cb) {

    var isCurrentDir = path.resolve(optDir) === __dirname;
    if (!isCurrentDir) {
        if (!fs.existsSync(optDir)) {
            fs.mkdirSync(optDir);
        }
        process.chdir(optDir);
    }

    var isEmptyDir = !glob.sync('**').length;
    if (!isEmptyDir) {
        cb('Specified target directory is not empty');
    } else {
        cb();
    }
}

//
// Create url for downloading the zip directly from github
//
function getGithubUrl(tags, cb) {

    var url = 'https://codeload.github.com/branneman/frntndr/zip/';

    if (optTag && !~tags.indexOf(optTag)) {
        return cb('Tag \'' + optTag + '\' not found, available tags: ' + tags.join(', '));
    }

    var tag = optTag ? optTag : tags[0];

    cb(null, url + tag);
}

//
// Download
//
function downloadZip(url, cb) {

    console.log('  Cloning tag...');

    var tmpFile = '_frntndr.zip';
    var out = fs.createWriteStream(tmpFile);

    https.get(url, function(res) {
        res.pipe(out);
        res.on('end', function(err) {
            cb(err, tmpFile);
        });
    });
}

//
// Unzip
//
function unzip(tmpFile, cb) {

    console.log('  Unzipping files...');

    var zip = new AdmZip(tmpFile);
    var files = zip.getEntries();

    files.forEach(function(file) {

        var oldPath = file.entryName;
        var newPath = oldPath.match(/^([^\/]*)\/(.*)/)[2]; // remove 'frntndr-[tag]' prefix
        if (newPath === '' || newPath.substr(-1) === '/') {
            return;
        }
        var newDir = path.dirname(newPath);

        zip.extractEntryTo(oldPath, './' + newDir, false, true);
    });

    cb(null, tmpFile);
}

//
// Delete temporary file
//
function unlink(tmpFile, cb) {
    console.log('  Removing temporary files...');
    fs.unlink(tmpFile, cb);
}

//
// Run `npm i` inside the directory
//
function npmInstall(cb) {

    console.log('  Installing dependencies... (this may take a while)');

    exec('npm i', function(err) {
        var msg = 'npm returned an error, see ' + 'npm-debug.log'.bold + '. Then run `npm install` manually.';
        cb(err ? msg : null);
    });
}

//
// Report results to CLI
//
function reporter(err) {

    if (err) {
        console.log('  Error:'.red.bold, err);
    } else {
        console.log('  Finished.'.green.bold, 'You can now start the development server.');
    }
    console.log('');
}
